/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package macchiato.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Particle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Particle\",\"namespace\":\"macchiato.avro\",\"fields\":[{\"name\":\"principal\",\"type\":\"string\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence principal;
  @Deprecated public java.lang.CharSequence operation;
  @Deprecated public java.lang.CharSequence source;
  @Deprecated public long timestamp;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Particle() {}

  /**
   * All-args constructor.
   */
  public Particle(java.lang.CharSequence principal, java.lang.CharSequence operation, java.lang.CharSequence source, java.lang.Long timestamp, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes) {
    this.principal = principal;
    this.operation = operation;
    this.source = source;
    this.timestamp = timestamp;
    this.attributes = attributes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return principal;
    case 1: return operation;
    case 2: return source;
    case 3: return timestamp;
    case 4: return attributes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: principal = (java.lang.CharSequence)value$; break;
    case 1: operation = (java.lang.CharSequence)value$; break;
    case 2: source = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: attributes = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'principal' field.
   */
  public java.lang.CharSequence getPrincipal() {
    return principal;
  }

  /**
   * Sets the value of the 'principal' field.
   * @param value the value to set.
   */
  public void setPrincipal(java.lang.CharSequence value) {
    this.principal = value;
  }

  /**
   * Gets the value of the 'operation' field.
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.attributes = value;
  }

  /** Creates a new Particle RecordBuilder */
  public static macchiato.avro.Particle.Builder newBuilder() {
    return new macchiato.avro.Particle.Builder();
  }
  
  /** Creates a new Particle RecordBuilder by copying an existing Builder */
  public static macchiato.avro.Particle.Builder newBuilder(macchiato.avro.Particle.Builder other) {
    return new macchiato.avro.Particle.Builder(other);
  }
  
  /** Creates a new Particle RecordBuilder by copying an existing Particle instance */
  public static macchiato.avro.Particle.Builder newBuilder(macchiato.avro.Particle other) {
    return new macchiato.avro.Particle.Builder(other);
  }
  
  /**
   * RecordBuilder for Particle instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Particle>
    implements org.apache.avro.data.RecordBuilder<Particle> {

    private java.lang.CharSequence principal;
    private java.lang.CharSequence operation;
    private java.lang.CharSequence source;
    private long timestamp;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;

    /** Creates a new Builder */
    private Builder() {
      super(macchiato.avro.Particle.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(macchiato.avro.Particle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.principal)) {
        this.principal = data().deepCopy(fields()[0].schema(), other.principal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operation)) {
        this.operation = data().deepCopy(fields()[1].schema(), other.operation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.attributes)) {
        this.attributes = data().deepCopy(fields()[4].schema(), other.attributes);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Particle instance */
    private Builder(macchiato.avro.Particle other) {
            super(macchiato.avro.Particle.SCHEMA$);
      if (isValidValue(fields()[0], other.principal)) {
        this.principal = data().deepCopy(fields()[0].schema(), other.principal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operation)) {
        this.operation = data().deepCopy(fields()[1].schema(), other.operation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.attributes)) {
        this.attributes = data().deepCopy(fields()[4].schema(), other.attributes);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'principal' field */
    public java.lang.CharSequence getPrincipal() {
      return principal;
    }
    
    /** Sets the value of the 'principal' field */
    public macchiato.avro.Particle.Builder setPrincipal(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.principal = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'principal' field has been set */
    public boolean hasPrincipal() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'principal' field */
    public macchiato.avro.Particle.Builder clearPrincipal() {
      principal = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'operation' field */
    public java.lang.CharSequence getOperation() {
      return operation;
    }
    
    /** Sets the value of the 'operation' field */
    public macchiato.avro.Particle.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.operation = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'operation' field has been set */
    public boolean hasOperation() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'operation' field */
    public macchiato.avro.Particle.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public java.lang.CharSequence getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public macchiato.avro.Particle.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.source = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'source' field */
    public macchiato.avro.Particle.Builder clearSource() {
      source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public macchiato.avro.Particle.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'timestamp' field */
    public macchiato.avro.Particle.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'attributes' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
      return attributes;
    }
    
    /** Sets the value of the 'attributes' field */
    public macchiato.avro.Particle.Builder setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.attributes = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'attributes' field has been set */
    public boolean hasAttributes() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'attributes' field */
    public macchiato.avro.Particle.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Particle build() {
      try {
        Particle record = new Particle();
        record.principal = fieldSetFlags()[0] ? this.principal : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.operation = fieldSetFlags()[1] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.source = fieldSetFlags()[2] ? this.source : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.attributes = fieldSetFlags()[4] ? this.attributes : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
